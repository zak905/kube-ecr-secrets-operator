name: e2e tests
on:
  pull_request:
    types: [opened, synchronize, reopened]
    
jobs:
    e2e-test:
      runs-on: ubuntu-latest
      strategy:
        matrix:
          kubernetes_version: ["v1.32.0", "v1.31.0", "v1.30.0"]
      steps:
        - name: Create k8s Kind Cluster
          uses: helm/kind-action@v1
          with:
            node_image: kindest/node:${{ matrix.kubernetes_version }}
        - uses: azure/setup-helm@v4.2.0
        - uses: actions/checkout@v4
        - name: install cert-manager chart
          run: |
            helm repo add jetstack https://charts.jetstack.io --force-update
            helm install \
            cert-manager jetstack/cert-manager \
            --namespace cert-manager \
            --create-namespace \
            --set crds.enabled=true
        - name: build docker image and load it into kind
          run: |
            docker build . -t kube-ecr-secrets-e2e-tests:${{ matrix.kubernetes_version }}
            kind load docker-image kube-ecr-secrets-e2e-tests:${{ matrix.kubernetes_version }} -n chart-testing
        - name: install kube-ecr-secrets-operator chart
          run: |
            helm install kube-ecr-secrets-operator chart --set image.repository=kube-ecr-secrets-e2e-tests \
            --set image.tag=${{ matrix.kubernetes_version }} --set image.pullPolicy=Never
            sleep 10s
            kubectl get po
            kubectl logs -l control-plane=controller-manager
            kubectl wait --timeout=30s --for=jsonpath='{.status.readyReplicas}'=1 \
            deployment/kube-ecr-secrets-operator-controller-manager
        - name: create kubernetes namespace
          run: |
            kubectl create namespace namespaced
            kubectl create namespace ns1
            kubectl create namespace ns2
            kubectl create namespace ns3
        - name: create ClusterAWSECRImagePullSecret and  ClusterAWSECRImagePullSecret objects
          env:
              AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
              AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
              AWS_REGION: ${{ secrets.AWS_REGION }}
          run: |
            cat hack/test-manifest-2.yaml | envsubst | kubectl apply -n namespaced -f -
            cat hack/test-manifest.yaml | envsubst | kubectl apply -f -
        - name: checks
          env:
              TEST_POD_IMAGE: ${{ secrets.TEST_POD_IMAGE }}
          run: |
            kubectl wait --timeout=10s --for=condition=Ready=True awsecrimagepullsecret/test-ecr-credentials -n namespaced
            kubectl wait --timeout=10s --for=condition=Ready=True clusterawsecrimagepullsecret/test-ecr-credentials
            kubectl get secret ecr-login -n namespaced
            kubectl get secret ecr-login -n ns1
            kubectl get secret ecr-login -n ns2
            kubectl get secret ecr-login -n ns3
            cat hack/test-pod.yaml | envsubst | kubectl apply -n namespaced -f -
            cat hack/test-pod.yaml | envsubst | kubectl apply -n ns1 -f -
            cat hack/test-pod.yaml | envsubst | kubectl apply -n ns2 -f -
            cat hack/test-pod.yaml | envsubst | kubectl apply -n ns3 -f -
            kubectl wait --timeout=60s --for=jsonpath='{.status.phase}'=Running pod/test-pod -n namespaced
            kubectl wait --timeout=60s --for=jsonpath='{.status.phase}'=Running pod/test-pod -n ns1
            kubectl wait --timeout=60s --for=jsonpath='{.status.phase}'=Running pod/test-pod -n ns2
            kubectl wait --timeout=60s --for=jsonpath='{.status.phase}'=Running pod/test-pod -n ns3
            

        
        
            